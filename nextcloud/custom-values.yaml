## Official nextcloud image version
## ref: https://hub.docker.com/r/library/nextcloud/tags/
##
image:
  repository: nextcloud
  flavor: fpm
  # default is generated by flavor and appVersion
  tag: 

## Allowing use of ingress controllers
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: true
  className: nginx
  annotations: 
   nginx.ingress.kubernetes.io/proxy-body-size: 4G
  #  kubernetes.io/tls-acme: "true"
   cert-manager.io/cluster-issuer: letsencrypt-prod
  #  # Keep this in sync with the README.md:
   nginx.ingress.kubernetes.io/server-snippet: |-
     server_tokens off;
     proxy_hide_header X-Powered-By;
     rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
     rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
     rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
     rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
     location = /.well-known/carddav {
       return 301 $scheme://$host/remote.php/dav;
     }
     location = /.well-known/caldav {
       return 301 $scheme://$host/remote.php/dav;
     }
     location = /robots.txt {
       allow all;
       log_not_found off;
       access_log off;
     }
     location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
       deny all;
     }
     location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
       deny all;
     }
  tls:
    - secretName: nextcloud-tls
      hosts:
        - cloud.domain.com
  labels: {}
  path: /
  pathType: Prefix

phpClientHttpsFix:
  enabled: true
  protocol: https

nextcloud:
  host: cloud.domain.com
  username: admin
  # password: changeme
  ## Use an existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-credentials
    usernameKey: nextcloud-username
    passwordKey: nextcloud-password
    # tokenKey: nextcloud-token
    # smtpUsernameKey: smtp-username
    # smtpPasswordKey: smtp-password
    # smtpHostKey: smtp-host
  

nginx:
  ## You need to set an fpm version of the image for nextcloud if you want to use nginx!
  enabled: true

internalDatabase:
  enabled: false
  name: nextcloud

##
## External database configuration
##
externalDatabase:
  enabled: true

  ## Supported database engines: mysql or postgresql
  type: postgresql

  ## Database host
  host: postgresql

  ## Use a existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-psql-credentials
    usernameKey: db-username
    passwordKey: db-password
    hostKey: db-hostname-or-ip
    databaseKey: db-name

##
## PostgreSQL chart configuration
## for more options see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
##
postgresql:
  enabled: false
  global:
    postgresql:
      # global.postgresql.auth overrides postgresql.auth
      auth:
        username: nextcloud
        database: nextcloud
        existingSecret: nextcloud-psql-credentials
        # Names of keys in existing secret to use for PostgreSQL credentials
        secretKeys:
          adminPasswordKey: admin-password
          userPasswordKey: db-password
  primary:
    persistence:
      enabled: true
      storageClass: "fast-nvme-nextcloud-psql"


## Cronjob to execute Nextcloud background tasks
## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
##
cronjob:
  enabled: true

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  # Nextcloud Data (/var/www/html)
  enabled: true
  storageClass: "fast-nvme-nextcloud-config"
  accessMode: ReadWriteOnce
  size: 8Gi

  ## Use an additional pvc for the data directory rather than a subpath of the default PVC
  ## Useful to store data on a different storageClass (e.g. on slower disks)
  nextcloudData:
    enabled: true
    existingClaim: "nfs-nextcloud"
